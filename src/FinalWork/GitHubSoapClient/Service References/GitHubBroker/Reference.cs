//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GitHubSoapClient.GitHubBroker {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IssuesCollectionResp", Namespace="http://schemas.datacontract.org/2004/07/GitHubSoapBroker")]
    [System.SerializableAttribute()]
    public partial class IssuesCollectionResp : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GitHubSoapClient.GitHubBroker.IssueData[] IssuesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GitHubSoapClient.GitHubBroker.IssueData[] Issues {
            get {
                return this.IssuesField;
            }
            set {
                if ((object.ReferenceEquals(this.IssuesField, value) != true)) {
                    this.IssuesField = value;
                    this.RaisePropertyChanged("Issues");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IssueData", Namespace="http://schemas.datacontract.org/2004/07/GitHubSoapBroker")]
    [System.SerializableAttribute()]
    public partial class IssueData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BodyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UrlField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Body {
            get {
                return this.BodyField;
            }
            set {
                if ((object.ReferenceEquals(this.BodyField, value) != true)) {
                    this.BodyField = value;
                    this.RaisePropertyChanged("Body");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Number {
            get {
                return this.NumberField;
            }
            set {
                if ((this.NumberField.Equals(value) != true)) {
                    this.NumberField = value;
                    this.RaisePropertyChanged("Number");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Url {
            get {
                return this.UrlField;
            }
            set {
                if ((object.ReferenceEquals(this.UrlField, value) != true)) {
                    this.UrlField = value;
                    this.RaisePropertyChanged("Url");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RepositoriesCollectionResp", Namespace="http://schemas.datacontract.org/2004/07/GitHubSoapBroker")]
    [System.SerializableAttribute()]
    public partial class RepositoriesCollectionResp : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GitHubSoapClient.GitHubBroker.Repository[] RepositoriesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GitHubSoapClient.GitHubBroker.Repository[] Repositories {
            get {
                return this.RepositoriesField;
            }
            set {
                if ((object.ReferenceEquals(this.RepositoriesField, value) != true)) {
                    this.RepositoriesField = value;
                    this.RaisePropertyChanged("Repositories");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Repository", Namespace="http://schemas.datacontract.org/2004/07/GitHubSoapBroker")]
    [System.SerializableAttribute()]
    public partial class Repository : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StatusResp", Namespace="http://schemas.datacontract.org/2004/07/GitHubSoapBroker")]
    [System.SerializableAttribute()]
    public partial class StatusResp : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GitHubSoapClient.GitHubBroker.StatusCode CodeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GitHubSoapClient.GitHubBroker.StatusCode Code {
            get {
                return this.CodeField;
            }
            set {
                if ((this.CodeField.Equals(value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StatusCode", Namespace="http://schemas.datacontract.org/2004/07/GitHubSoapBroker")]
    public enum StatusCode : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ok = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Error = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GitHubBroker.IGitHubSoapBroker")]
    public interface IGitHubSoapBroker {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGitHubSoapBroker/GetAllIssues", ReplyAction="http://tempuri.org/IGitHubSoapBroker/GetAllIssuesResponse")]
        GitHubSoapClient.GitHubBroker.IssuesCollectionResp GetAllIssues();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGitHubSoapBroker/GetRepositoryIssues", ReplyAction="http://tempuri.org/IGitHubSoapBroker/GetRepositoryIssuesResponse")]
        GitHubSoapClient.GitHubBroker.IssuesCollectionResp GetRepositoryIssues(string repository);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGitHubSoapBroker/GetRepositories", ReplyAction="http://tempuri.org/IGitHubSoapBroker/GetRepositoriesResponse")]
        GitHubSoapClient.GitHubBroker.RepositoriesCollectionResp GetRepositories();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGitHubSoapBroker/CreateIssue", ReplyAction="http://tempuri.org/IGitHubSoapBroker/CreateIssueResponse")]
        GitHubSoapClient.GitHubBroker.StatusResp CreateIssue(string repository, GitHubSoapClient.GitHubBroker.IssueData i);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGitHubSoapBroker/EditIssue", ReplyAction="http://tempuri.org/IGitHubSoapBroker/EditIssueResponse")]
        GitHubSoapClient.GitHubBroker.StatusResp EditIssue(string repository, string id, GitHubSoapClient.GitHubBroker.IssueData i);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGitHubSoapBrokerChannel : GitHubSoapClient.GitHubBroker.IGitHubSoapBroker, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GitHubSoapBrokerClient : System.ServiceModel.ClientBase<GitHubSoapClient.GitHubBroker.IGitHubSoapBroker>, GitHubSoapClient.GitHubBroker.IGitHubSoapBroker {
        
        public GitHubSoapBrokerClient() {
        }
        
        public GitHubSoapBrokerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GitHubSoapBrokerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GitHubSoapBrokerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GitHubSoapBrokerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public GitHubSoapClient.GitHubBroker.IssuesCollectionResp GetAllIssues() {
            return base.Channel.GetAllIssues();
        }
        
        public GitHubSoapClient.GitHubBroker.IssuesCollectionResp GetRepositoryIssues(string repository) {
            return base.Channel.GetRepositoryIssues(repository);
        }
        
        public GitHubSoapClient.GitHubBroker.RepositoriesCollectionResp GetRepositories() {
            return base.Channel.GetRepositories();
        }
        
        public GitHubSoapClient.GitHubBroker.StatusResp CreateIssue(string repository, GitHubSoapClient.GitHubBroker.IssueData i) {
            return base.Channel.CreateIssue(repository, i);
        }
        
        public GitHubSoapClient.GitHubBroker.StatusResp EditIssue(string repository, string id, GitHubSoapClient.GitHubBroker.IssueData i) {
            return base.Channel.EditIssue(repository, id, i);
        }
    }
}
